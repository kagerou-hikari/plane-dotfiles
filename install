#!/bin/bash

# Set colors for better readability
CRE=$(tput setaf 1)
CYE=$(tput setaf 3)
CGR=$(tput setaf 2)
CBL=$(tput setaf 4)
BLD=$(tput bold)
CNC=$(tput sgr0)

# Define backup folder and date
backup_folder="$HOME/.RiceBackup/$(date +%Y%m%d_%H%M%S)"

# Function for displaying a logo or header
print_logo() {
    local text="${1:?}"
    printf ' %s [%s%s %s%s %s]%s\n\n' "${CRE}" "${CNC}" "${CYE}" "${text}" "${CNC}" "${CRE}" "${CNC}"
}

# Function to check if a package is installed
is_installed() {
    pacman -Qi "$1" &>/dev/null
    return $?
}

# Function for backing up files
perform_backup() {
    local source_path="$1"
    local target_path="$2"
    local folder_name="$(basename "$source_path")"
    
    if [ -d "$source_path" ]; then
        mv "$source_path" "$target_path"
        echo "$folder_name folder backed up successfully at $target_path"
    else
        echo "The folder $folder_name does not exist at $source_path"
    fi
}

# Function for installing plugins
install_plugin() {
    local repo=$1
    local target_dir=${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/$(basename "$repo")
    
    if [ -d "$target_dir" ]; then
        printf "%s already installed. Skipping.\n" "$(basename "$repo")"
    else
        printf "Installing %s...\n" "$(basename "$repo")"
        git clone "$repo" "$target_dir"
    fi
}

# Main script
clear
print_logo "Welcome!"

# Update system
print_logo "Updating system"
sudo rm -rf /var/lib/pacman/db.lck
sudo pacman -Syu --noconfirm

# Install X.Org
print_logo "Installing X.Org"
sudo pacman -S --needed --noconfirm xorg xorg-drivers

# Install Pipewire (audio)
print_logo "Installing Pipewire (audio)"
yes y | sudo pacman -S --needed pipewire pipewire-pulse wireplumber

# Install Yay (AUR helper)
print_logo "Installing yay"
if command -v yay &>/dev/null; then
    echo "Yay is installed on your system"
else
    sudo pacman -S --needed --noconfirm base-devel && git clone https://aur.archlinux.org/yay.git && cd yay && makepkg -si --noconfirm && cd ..
fi

# Install packages
print_logo "Installing needed packages"
dependencies=(kitty zsh bspwm ly cerebro-bin pywal-git dragon-drop ibus-daemon bibata-cursor-theme polkit-gnome dunst feh git gtk-engine-murrine gvfs gvfs-afc gvfs-mtp gvfs-smb htop librewolf lmaofetch lxappearance mpc mpd mpv ncmpcpp neovim networkmanager pamixer pavucontrol qogir-icon-theme ranger rofi scrot sed sxhkd udisks2 ttf-roboto-mono ttf-roboto-mono-nerd unzip xclip xdg-user-dirs-gtk xorg-xinit zathura zathura-pdf-mupdf zip picom-simpleanims-next-git vscodium-bin )

printf "%s%sChecking for required packages%s\n" "${BLD}" "${CBL}" "${CNC}"
for package in "${dependencies[@]}"; do
    if ! is_installed "$package"; then
        yay -S --noconfirm "$package"
        printf "\n"
    else
        printf '%s%s is already installed on your system!%s\n' "${CGR}" "$package" "${CNC}"
    fi
done

# Preparing folders
print_logo "Preparing Folders"
if [ ! -e "$HOME"/.config/user-dirs.dirs ]; then
    xdg-user-dirs-update
    echo "Creating xdg-user-dirs"
else
    echo "user-dirs.dirs already exists"
fi

# Backup dotfiles
print_logo "Backing-up dotfiles"
printf "Backup files will be stored in %s%s%s/.RiceBackup%s \n\n" "${BLD}" "${CRE}" "$HOME" "${CNC}"
sleep 1
mkdir -p "$backup_folder"

# Backup specified config folders
for folder in kitty bspwm htop gtk-2.0 gtk-3.0 gtk-4.0 mpd ncmpcpp neovim ranger qBittorrent zathura; do
    perform_backup "$HOME/.config/$folder" "$backup_folder/${folder}_$(date +%Y%m%d_%H%M%S)"
done

# Backup wallpapers folder
perform_backup "$HOME/Pictures/wallpapers" "$backup_folder/wallpapers_$(date +%Y%m%d_%H%M%S)"

# Backup specific files
[ -f "$HOME/.zshrc" ] && mv "$HOME/.zshrc" "$backup_folder/.zshrc-backup-$(date +%Y%m%d-%H%M%S)"
[ -f "$HOME/.fehbg" ] && mv "$HOME/.fehbg" "$backup_folder/.fehbg-backup-$(date +%Y%m%d-%H%M%S)"
clear 

# Configure Zsh and install plugins
print_logo "Configuring Zsh.."
printf "Installing ohmyzsh..\n"
sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
install_plugin https://github.com/zsh-users/zsh-autosuggestions
install_plugin https://github.com/zsh-users/zsh-syntax-highlighting.git
install_plugin https://github.com/zsh-users/zsh-history-substring-search
install_plugin https://github.com/MichaelAquilina/zsh-autoswitch-virtualenv.git
install_plugin https://github.com/MichaelAquilina/zsh-you-should-use.git
install_plugin https://github.com/MichaelAquilina/zsh-auto-notify.git
printf "Installing prompt (Starship)...\n"
curl -fsSL https://starship.rs/install.sh | bash
clear

# Install wallpapers
print_logo "Install wallpapers"
git clone https://github.com/whoisYoges/lwalpapers.git "$HOME"/wallpapers || { echo "Error: Unable to clone wallpapers repository"; sleep 2 && exit 1; }
mkdir -p "$HOME"/Pictures/wallpapers
mv "$HOME"/wallpapers/* "$HOME"/Pictures/wallpapers || { echo "Error: Unable to move wallpapers"; sleep 2 && exit 1;}
rm -rf "$HOME"/wallpapers
echo "Wallpapers installed successfully."
clear

# Downloading dotfiles
print_logo "Downloading dotfiles"
[ -d ~/dotfiles ] && rm -rf ~/dotfiles
printf "Cloning rice\n"
cd "$HOME" || exit
git clone --depth=1 https://github.com/MineNique/plane-dotfiles.git
clear

# Installing dotfiles
print_logo "Installing dotfiles.."
printf "Copying files to respective directories..\n"

# Create necessary directories if they don't exist
[ ! -d "$HOME"/.config ] && mkdir -p "$HOME"/.config
[ ! -d "$HOME"/.fonts ] && mkdir -p "$HOME"/.fonts
[ ! -d "$HOME"/.local/share/applications ] && mkdir -p "$HOME"/.local/share/applications

# Copy configuration files to ~/.config
for file in "$HOME"/dotfiles/config/*; do
    cp -r "$file" "$HOME"/.config/
    if [ $? -eq 0 ]; then
        printf "%s%s%s folder copied successfully!%s\n" "${BLD}" "${CGR}" "$file" "${CNC}"
    else
        printf "%s%s%s failed to be copied, you must copy it manually%s\n" "${BLD}" "${CRE}" "$file" "${CNC}"
        sleep 1
    fi
done

# Copy home directory files to ~/
for file in "$HOME"/dotfiles/home/*; do
    cp -r "$file" "$HOME"/
    if [ $? -eq 0 ]; then
        printf "%s%s%s folder copied successfully!%s\n" "${BLD}" "${CGR}" "$file" "${CNC}"
    else
        printf "%s%s%s failed to be copied, you must copy it manually%s\n" "${BLD}" "${CRE}" "$file" "${CNC}"
        sleep 1
    fi
done

# Copy theme files to /usr/share/themes/
for file in "$HOME"/dotfiles/themes/*; do
    sudo cp -r "$file" /usr/share/themes/
    if [ $? -eq 0 ]; then
        printf "%s%s%s folder copied successfully!%s\n" "${BLD}" "${CGR}" "$file" "${CNC}"
    else
        printf "%s%s%s failed to be copied, you must copy it manually%s\n" "${BLD}" "${CRE}" "$file" "${CNC}"
        sleep 1
    fi
done

printf "%s%sDone!\n\n" "${BLD}" "${CGR}"
sleep 2
clear

# Configure dotfiles
print_logo "Configuring dotfiles"
chmod -R +x ~/.config/
[ -d ~/.xinitrc ] && chmod +x ~/.xinitrc
[ -d ~/.ssh ] && chmod 0700 ~/.ssh
[ -d ~/.gnupg ] && chmod 0700 ~/.gnupg
mkdir -p ~/.cache/zsh
touch ~/.cache/zsh/zhistory 
[ -d ~/.cache/zsh/zhistory ] && chmod 0600 ~/.cache/zsh/zhistory
printf "%s%sDone!\n\n" "${BLD}" "${CGR}"
sleep 2
clear

# Configure pacman
print_logo "Configuring pacman"
grep "^Color" /etc/pacman.conf >/dev/null || sudo sed -i "s/^#Color$/Color/" /etc/pacman.conf
grep "ILoveCandy" /etc/pacman.conf >/dev/null || sudo sed -i "/#VerbosePkgLists/a ILoveCandy" /etc/pacman.conf
printf "%s%sDone!\n\n" "${BLD}" "${CGR}"
sleep 2
clear

# Enable services
print_logo "Enabling services"
systemctl --user enable mpd.service
systemctl --user start mpd.service
sudo systemctl enable NetworkManager
sudo systemctl enable ly.service
systemctl --user enable pipewire pipewire-pulse wireplumber
printf "%s%sDone!%s\n\n" "${BLD}" "${CGR}" "${CNC}"
sleep 2
clear

print_logo "Generate color scheme"
print "Use ' > ' or  ' . ' for the next scheme, ' < '  or ' , ' for the previous scheme, and/or q to apply."
. ~/.config/bspwm/scripts/bspwall
sleep 2
clear

# Final message and restart prompt
print_logo "Done!"
printf "%s%sThanks for using my config! %s\n" "${BLD}" "${CYE}" "${CNC}"
while true; do
    read -rp "Do you want to restart now? [y/n]: " yn
    case $yn in
        [Yy]*) reboot ;;
        [Nn]*) exit ;;
        *) printf "Just write 'y' or 'n'\n\n" ;;
    esac
done
