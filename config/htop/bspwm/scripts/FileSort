#!/usr/bin/env python3

import os
import shutil
import logging
from concurrent.futures import ThreadPoolExecutor, ProcessPoolExecutor
from multiprocessing import cpu_count
from datetime import datetime
from typing import Dict, List, Tuple

# Directories and file types
SOURCE_DIR: str = os.path.expanduser("~/Downloads")
DESTINATION_DIRS: Dict[str, str] = {
    "document": os.path.expanduser("~/Documents"),
    "picture": os.path.expanduser("~/Pictures"),
    "pdf": os.path.expanduser("~/Archive/Pdf"),
    "text": os.path.expanduser("~/Archive/Text"),
    "music": os.path.expanduser("~/Music"),
    "edit": os.path.expanduser("~/Archive/Edit"),
    "archive": os.path.expanduser("~/Archive"),
    "code": os.path.expanduser("~/Archive/Code"),
    "hidden": os.path.expanduser("~/Archive/Hidden"),
    "other": os.path.expanduser("~/Archive/Other"),
    "folder": os.path.expanduser("~/Archive/Folder"),
}

FILE_TYPES: Dict[str, set] = {
    "document": {".doc", ".docx", ".ppt", ".pptx", ".xls", ".xlsx", ".pdf"},
    "picture": {".jpg", ".jpeg", ".png", ".gif", ".bmp", ".svg"},
    "text": {".txt", ".md", ".csv", ".json", ".yaml"},
    "music": {".mp3", ".wav", ".flac", ".ogg", ".aac"},
    "edit": {".psd", ".ai", ".svg", ".xcf"},
    "archive": {".zip", ".rar", ".7z", ".tar", ".gz"},
    "code": {".py", ".js", ".html", ".css", ".cpp", ".java"},
    "hidden": {".env", ".gitignore", ".babelrc"},
}

# Reverse lookup for file extensions
EXTENSION_TO_CATEGORY: Dict[str, str] = {
    ext: category for category, extensions in FILE_TYPES.items() for ext in extensions
}

# Logging setup
LOG_FILE: str = os.path.expanduser(
    f"~/.errors/{datetime.now().strftime('%Y-%m-%d_%H-%M-%S.log')}"
)
os.makedirs(os.path.dirname(LOG_FILE), exist_ok=True)
logging.basicConfig(
    filename=LOG_FILE,
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
)


def ensure_directories_exist() -> None:
    """Ensure that all destination directories exist."""
    for directory in DESTINATION_DIRS.values():
        os.makedirs(directory, exist_ok=True)


def classify_file(filename: str) -> str:
    """Classify the file based on its extension.

    Args:
        filename (str): The name of the file to classify.

    Returns:
        str: The category of the file.
    """
    _, ext = os.path.splitext(filename)
    return EXTENSION_TO_CATEGORY.get(ext.lower(), "other")


def move_item(src_path: str, dest_category: str) -> None:
    """Move a file or directory to its destination category.

    Args:
        src_path (str): The source path of the file or directory.
        dest_category (str): The category to move the file or directory to.
    """
    dest_dir: str = DESTINATION_DIRS.get(dest_category, DESTINATION_DIRS["other"])
    dest_path: str = os.path.join(dest_dir, os.path.basename(src_path))

    try:
        shutil.move(src_path, dest_path)
        logging.info(f"Moved: '{src_path}' to '{dest_path}'")
    except (OSError, shutil.Error) as e:
        logging.error(f"Failed to move: '{src_path}' -> '{dest_path}': {e}")


def process_item(item: Tuple[str, str]) -> None:
    """Process a single file or directory.

    Args:
        item (Tuple[str, str]): A tuple containing the name and path of the item.
    """
    name, path = item

    if os.path.isdir(path):
        move_item(path, "folder")
    elif name.startswith(".") or classify_file(name) == "hidden":
        try:
            os.remove(path)  # Delete hidden files
            logging.info(f"Deleted hidden file: '{path}'")
        except OSError as e:
            logging.error(f"Failed to delete hidden file '{path}': {e}")
    else:
        category: str = classify_file(name)
        move_item(path, category)


def main() -> None:
    """Main function to organize files."""
    ensure_directories_exist()

    try:
        with os.scandir(SOURCE_DIR) as entries:
            items: List[Tuple[str, str]] = [
                (entry.name, entry.path)
                for entry in entries
                if entry.is_file() or entry.is_dir()
            ]
    except OSError as e:
        logging.error(f"Failed to scan directory '{SOURCE_DIR}': {e}")
        return

    if not items:
        logging.info("No items to process.")
        return

    num_workers: int = min(cpu_count(), len(items))
    chunk_size: int = max(1, len(items) // num_workers)
    chunks: List[List[Tuple[str, str]]] = [
        items[i : i + chunk_size] for i in range(0, len(items), chunk_size)
    ]

    with ProcessPoolExecutor(max_workers=num_workers) as executor:
        executor.map(
            lambda chunk: ThreadPoolExecutor().map(process_item, chunk), chunks
        )


if __name__ == "__main__":
    main()
